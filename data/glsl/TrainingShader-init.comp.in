#version 450

// enable debug printf extension only in debug mode
// for debug printf infos, see https://www.lunarg.com/wp-content/uploads/2021/08/Using-Debug-Printf-02August2021.pdf
//#extension GL_EXT_debug_printf : enable

/**
 * *TEMPLATE* GLSL training compute shader for Vulkan, by Dams
 * Damien Balima (c) CC-BY-NC-SA-4.0 2024
 * Do not edit
 */

const int OUTPUT_SIZE_X = %%OUTPUT_SIZE_X%%;
const int OUTPUT_SIZE_Y = %%OUTPUT_SIZE_Y%%;
const int HIDDEN_SIZE_X = %%HIDDEN_SIZE_X%%;
const int HIDDEN_SIZE_Y = %%HIDDEN_SIZE_Y%%;
const int INPUT_SIZE_X = %%INPUT_SIZE_X%%;
const int INPUT_SIZE_Y = %%INPUT_SIZE_Y%%;


layout(std430, binding = 7) buffer SharedOutputValues { 
  vec4 values[OUTPUT_SIZE_Y][OUTPUT_SIZE_X];
}
sharedOutputValues;

layout(std430, binding = 8) buffer SharedOutputLoss { 
  float values[OUTPUT_SIZE_Y][OUTPUT_SIZE_X];
}
sharedOutputLoss;


void main() {
  // Get the index of the neuron (one global thread per neuron)
  uint index_x = gl_GlobalInvocationID.x;
  uint index_y = gl_GlobalInvocationID.y;

  // Initialize variables
  if (index_y < OUTPUT_SIZE_Y && index_x < OUTPUT_SIZE_X) {
    sharedOutputValues.values[index_y][index_x] = vec4(0.0);
    sharedOutputLoss.values[index_y][index_x] = 0.0f;
  } 

  // Then global threads synchro before next step
}