#version 450

// enable debug printf extension only in debug mode
// for debug printf infos, see https://www.lunarg.com/wp-content/uploads/2021/08/Using-Debug-Printf-02August2021.pdf
//#extension GL_EXT_debug_printf : enable

/**
 * *TEMPLATE* GLSL training compute shader for Vulkan, by Dams
 * Damien Balima (c) CC-BY-NC-SA-4.0 2024
 * Do not edit
 */

const int OUTPUT_SIZE_X = %%OUTPUT_SIZE_X%%;
const int OUTPUT_SIZE_Y = %%OUTPUT_SIZE_Y%%;
const int HIDDEN_SIZE_X = %%HIDDEN_SIZE_X%%;
const int HIDDEN_SIZE_Y = %%HIDDEN_SIZE_Y%%;
const int INPUT_SIZE_X = %%INPUT_SIZE_X%%;
const int INPUT_SIZE_Y = %%INPUT_SIZE_Y%%;

// Enum mapping, do not change
const int ELU = 0;
const int LReLU = 1;
const int PReLU = 2;
const int ReLU = 3;
const int Sigmoid = 4;
const int Tanh = 5;

struct Neighbor {
  uint is_used;
  uint index_x;
  uint index_y;
  vec4 weight; // weight of the neighbor connection
};

struct HiddenNeuron {
  uint index_x;
  uint index_y;
  vec4 weights[INPUT_SIZE_Y][INPUT_SIZE_X];
  Neighbor neighbors[4];
};

struct OutputNeuron {
  uint index_x;
  uint index_y;
  vec4 weights[HIDDEN_SIZE_Y][HIDDEN_SIZE_X];
  Neighbor neighbors[4];
};

// Parameters binding
layout(std430, binding = 0) buffer readonly Parameters {
  float learning_rate;
  float error_min;
  float error_max;
}
params;

// Layers binding
layout(std430, binding = 1) buffer readonly InputLayer {
  float activation_alpha;
  uint activation_function;
  uint size_x;
  uint size_y;
}
inputLayerBuffer;

layout(std430, binding = 2) buffer OutputLayer {
  OutputNeuron neurons[OUTPUT_SIZE_Y][OUTPUT_SIZE_X];
  vec4 errors[OUTPUT_SIZE_Y][OUTPUT_SIZE_X];
  float activation_alpha;
  uint activation_function;
  uint size_x;
  uint size_y;
}
outputLayerBuffer;

layout(std430, binding = 3) buffer HiddenLayer1 {
  HiddenNeuron neurons[HIDDEN_SIZE_Y][HIDDEN_SIZE_X];
  vec4 values[HIDDEN_SIZE_Y][HIDDEN_SIZE_X];
  vec4 errors[HIDDEN_SIZE_Y][HIDDEN_SIZE_X];
  float activation_alpha;
  uint activation_function;
  uint size_x;
  uint size_y;
}
hiddenLayer1Buffer;

// Data binding
layout(std430, binding = 4) buffer readonly InputData {
  vec4 inputValues[INPUT_SIZE_Y][INPUT_SIZE_X];  
  vec4 targetValues[OUTPUT_SIZE_Y][OUTPUT_SIZE_X];  
  bool is_validation;
}
inputDataBuffer;

layout(std430, binding = 5) buffer writeonly OutputData { 
  vec4 outputValues[OUTPUT_SIZE_Y][OUTPUT_SIZE_X];
}
outputDataBuffer;

layout(std430, binding = 6) buffer writeonly OutputLoss { 
  float loss;
}
lossBuffer;

layout(std430, binding = 7) buffer SharedOutputValues { 
  vec4 values[OUTPUT_SIZE_Y][OUTPUT_SIZE_X];
}
sharedOutputValues;

layout(std430, binding = 8) buffer SharedOutputLoss { 
  float values[OUTPUT_SIZE_Y][OUTPUT_SIZE_X];
}
sharedOutputLoss;

// Functions
void updateWeightsOutputLayer(uint index_x, uint index_y) {
  if (index_y >= OUTPUT_SIZE_Y || index_x >= OUTPUT_SIZE_X) {
    return;
  }
  vec4 learningRateError =
      outputLayerBuffer.errors[index_y][index_x] * params.learning_rate;
  //debugPrintfEXT("[DEBUG][UPDATEWEIGHTSOUTPUTLAYER] learningRateError [%i][%i] = %v4f", index_y, index_x, learningRateError);      

  // Update neuron weights that are connections weights with previous layers
  uint prevLayerRows = outputLayerBuffer.neurons[index_y][index_x].weights.length();
  uint prevLayerCols = outputLayerBuffer.neurons[index_y][index_x].weights[0].length();  
  for (uint y = 0; y < prevLayerRows; y++) {
    for (uint x = 0; x < prevLayerCols; x++) {
      outputLayerBuffer.neurons[index_y][index_x].weights[y][x] -=
          (hiddenLayer1Buffer.values[y][x] * learningRateError);
    }
  }

  // Update neighbors connections weights
  for (uint i = 0; i < outputLayerBuffer.neurons[index_y][index_x].neighbors.length();
       i++) {
    if (outputLayerBuffer.neurons[index_y][index_x].neighbors[i].is_used == 0) {
      continue;
    }
    outputLayerBuffer.neurons[index_y][index_x].neighbors[i].weight -=
        sharedOutputValues.values
            [outputLayerBuffer.neurons[index_y][index_x].neighbors[i].index_y]
            [outputLayerBuffer.neurons[index_y][index_x].neighbors[i].index_x] *
        learningRateError;
  }
}

void main() {
  // Get the index of the neuron (one global thread per neuron)
  uint index_x = gl_GlobalInvocationID.x;
  uint index_y = gl_GlobalInvocationID.y;

  // Backward Propagation part 4 (not for validation)
  if (inputDataBuffer.is_validation) {
    return;
  } 
  updateWeightsOutputLayer(index_x, index_y);

  // Then global threads synchro before forward again
}