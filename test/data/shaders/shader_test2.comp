#version 450

layout(local_size_x = 2, local_size_y = 2) in;

struct Neighbor {
  uint is_used;
  uint index_x;
  uint index_y;
  vec4 weight; // weight of the neighbor connection
};

struct HiddenNeuron {
  uint index_x;
  uint index_y;
  vec4 weights[2][2];
  Neighbor neighbors[4];
};

layout(std430, binding = 0) buffer Parameters {
  float learning_rate;
  float error_min;
  float error_max;
}
params;

layout(std430, binding = 3) buffer HiddenLayer1 {
  HiddenNeuron neurons[2][2];
  vec4 values[2][2];
  vec4 errors[2][2];
  float activation_alpha;
  uint activation_function;
  uint size_x;
  uint size_y;
}
hiddenLayer1Buffer;

layout(std430, binding = 6) buffer OutputLoss { float loss; }
lossBuffer;

void main() {
  if (gl_LocalInvocationIndex == 0) {
    lossBuffer.loss = params.learning_rate * 2;
  }
}